#!/bin/bash

banner() {
    echo "
 _   _ _____ _____ ____    __  __                   _            
| \ | |_   _|  ___/ ___|  |  \/  | ___  _   _ _ __ | |_ ___ _ __ 
|  \| | | | | |_  \___ \  | |\/| |/ _ \| | | | '_ \| __/ _ \ '__|
| |\  | | | |  _|  ___) | | |  | | (_) | |_| | | | | ||  __/ |   
|_| \_| |_| |_|   |____/  |_|  |_|\___/ \__,_|_| |_|\__\___|_|
=================================================================
                                    By: Zavier Ferodova Al Fitroh
"
}

is_root() {
    if [[ $(id -u) == 0 ]]; then
        return 0 # true
    else
        return 1 # false
    fi
}

get_external_volumes() {
    local volumes_list=$(ls -1 /Volumes)
    local external_volumes=()
    local external_identifiers=()

    while read -r volume; do 
        local disk_information=$(diskutil list | awk '/external/,/^$/' | grep "$volume")
        if [ -n "$disk_information" ]; then
            local identifier=$(echo "$disk_information" | awk '{print $NF}')
            external_identifiers+=("$identifier")
            external_volumes+=("$volume")
        fi
    done <<< "$volumes_list"

    # Join arrays with a separator and echo them for return
    echo "$(IFS="|"; echo "${external_volumes[*]}")|$(IFS="|"; echo "${external_identifiers[*]}")"
}

print_volumes() {
    local volumes=("$@")
    local count=1

    for volume in "${volumes[@]}"; do
        echo "[${count}] $volume"
        ((count++))
    done
}

result=$(get_external_volumes)

# Split the returned string into two arrays
IFS="|" read -r external_volumes_str external_identifiers_str <<< "$result"
IFS="|" read -ra external_volumes <<< "$external_volumes_str"
IFS="|" read -ra external_identifiers <<< "$external_identifiers_str"

if is_root; then
    if [ -z "${external_volumes[@]}" ]; then
        banner
        echo "External disks are empty!"
    else
        banner
        printf "Choose external volume to mount:\n"
        print_volumes "${external_volumes[@]}"
        printf "\n~> "
        read selected_index

        if [[ "$selected_index" =~ ^-?[0-9]+$ ]]; then
            if [[ $selected_index -gt -1 ]] && [[ $selected_index -le ${#external_volumes[@]} ]]; then
                selected_disk_name="${external_volumes[$selected_index-1]}"
                selected_identifier="${external_identifiers[$selected_index-1]}"

                printf "\nProcessing....\n"
                printf "Selected volume $selected_disk_name on $selected_identifier\n"
                printf "Unmounting volume $selected_disk_name\n"
                diskutil unmount "/Volumes/${selected_disk_name}"
                
                printf "Remounting volume $selected_disk_name on $selected_identifier\n"
                ntfs-3g /dev/$selected_identifier \
                    "/Volumes/$selected_disk_name" \
                    -o volname="${VOLUME_NAME}" \
                    -o local \
                    -o negative_vncache \
                    -o auto_xattr \
                    -o auto_cache \
                    -o noatime \
                    -o windows_names \
                    -o user_xattr \
                    -o inherit \
                    -o allow_other \
                    &> /var/log/mount-ntfs-3g.log

                if [ $? -eq 0 ]; then
                    echo "Command completed!"
                else
                    echo "Failed to mount volume. Check /var/log/mount-ntfs-3g.log for details."
                fi
            else
                printf "\nVolume not available !\n"
            fi
        else
            printf "\nVolume not available !\n"
        fi
    fi
else
    banner
    echo "Please run script using sudo!"
fi
